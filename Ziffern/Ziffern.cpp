/*
写个函数deldigits(unsigned num, unsigned short div)
已给出num和div，对num取位，判断某位是否能整除div，若能则从数中删去，返回不能整除div的数
不能用循环
不能用静态变量static
不能用库函数
仅能用int，不能用数组和指针
不用写main()
*/
#include<iostream>

using namespace std;

unsigned deldigits(unsigned num, unsigned short div);

int main(){

    unsigned num = 123;
    int div = 4;
    //scanf("请输入num: %d",&num);
    //scanf("请输入div: %d",&div);

    //这个cout你知道是个调用就行，看不懂的话，你也可以写成：
    //printf("右侧为结果：%d",deldigits(num,div));
    //cout就是个输出
    cout<<deldigits(num,div)<<"左侧为结果"<<endl;
    
    return 0;

}

unsigned deldigits(unsigned num, unsigned short div){
    //判断是否有沙雕输入，这个判断可有可无。
    if (num < 0){
        return false;
    }
    
    //终止条件，例如原始数字串是123456，div=4，那么当num=1时，1/10%10==0成立了，就达到终止条件了
    //num<10提供了对num中间出现0时的规避，例如num=123045,div=4,当num=12304时，12304/10%10==0也成立
    //所以为了回避这种中间断开的情况，就需要再加上num<10这个判断。
    if(num/10%10==0 && num<10){
        //现在的num一定为原始数字的第一个数字
        //因为已经达到终止条件了，所以在此语句块之后的语句便不会执行，
        //因此必须在此语句块中返回一个确定的值，
        //这个值必须表明了这个num值和div的关系
        //------建议从这里跳到下方（A）处继续阅读------
        //(B)
        //此处用0表示能整除，若不能整除，则返回该值
        //若返回0，可以想到的是，这个数要从整个数字串中删去，
        //因此在之前的递归运算中，不论0是否乘以10，都等于0，
        if (num %div==0){
            return 0;
        }
        else{
            //此处返回数值原值，
            //可以想到，在之前的递归中，要么把当前的num*10放在上一个不能整除div的数字的左侧，
            //要么把当前的num放在上一个能够整除div的数字的位置，
            //因此返回num。
            return num;
            //----建议跳转到(C)----
        }
    }
    //-----------------------------------------

    //(A)
    //这段if...else...是该函数的核心模块，或者说是计算模块，
    //当这个函数执行时，需要判断当前传递进来的num的最后一位与div的关系，
    //其关系为：整除，或不能整除。
    //此处采用先判断为 不能整除
    if(num%10 %div != 0){
        //若不能整除，则让此时的num取个为，例如对12345取5，
        //然后让5+下一位数，
        //这个下一位数需要放在5的左边（因为之前取的5是最低位），因此需要让函数*10
        num = num%10 + deldigits(num/10,div)*10;
    }
    //这里同理，若num的最后一位能整除div了，那么要把这个最后一位数从num中删去，
    //在删去的同时，需要意识到，整个num的位数也减一了，
    //因此不需要把下一位数放在当前数的左边，
    else{
        //此处的0就是表示当前的最后一位，因为不再需要它了，就让它为0，
        //然后把下一位的数放在当前位置，因此函数无需*10
        num = 0 + deldigits(num/10,div);
    }
    //--------当你阅读到这里时，建议你跳到(B)处继续阅读---------
    //(C)
    //接下来这个return，就是返回最终的计算结果，在上面(A)和(B)的计算中，
    //已经经过递归获取了最终整合过的num的值，只需要返回就好。
    return num;
}